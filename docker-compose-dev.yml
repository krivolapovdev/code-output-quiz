x-common-variables: &common-variables
  CONFIG_SERVER: http://config-server:8888
  EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
  LOKI_URL: http://loki:3100/loki/api/v1/push
  MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans

services:
  prometheus:
    container_name: prometheus
    build:
      context: ./infrastructure/docker/prometheus
    restart: no
    ports:
      - "9090:9090"

  loki:
    container_name: loki
    build:
      context: ./infrastructure/docker/loki
    restart: no
    ports:
      - "3100:3100"

  grafana:
    container_name: grafana
    restart: no
    build:
      context: ./infrastructure/docker/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - loki

  zipkin:
    image: openzipkin/zipkin:3.5.1
    container_name: zipkin
    ports:
      - "9411:9411"
    restart: no

  config-server:
    container_name: config-server
    build:
      context: ./backend
      dockerfile: ../infrastructure/docker/config-server/Dockerfile
    restart: no
    environment:
      <<: *common-variables
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-jwt-ultra-secure-and-ultra-long-secret}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8888:8888"
    depends_on:
      - grafana
      - zipkin

  eureka-server:
    container_name: eureka-server
    build:
      context: ./backend
      dockerfile: ../infrastructure/docker/eureka-server/Dockerfile
    restart: no
    environment:
      <<: *common-variables
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8761:8761"
    depends_on:
      config-server:
        condition: service_healthy

  db-quiz:
    container_name: db-quiz
    image: postgres:17.5-alpine3.22
    ports:
      - "5432:5432"
    environment:
      - TZ=Asia/Almaty
      - PGTZ=Asia/Almaty
      - POSTGRES_DB=quiz_db
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-root}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8 --auth-host=scram-sha-256 --auth-local=scram-sha-256
    volumes:
      - db-quiz-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: no

  redis:
    container_name: redis
    image: redis:8.0.2-alpine3.21
    ports:
      - "6379:6379"
    command: [ "redis-server", "--maxmemory", "256mb", "--maxmemory-policy", "allkeys-lru" ]
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: no

  quiz-service:
    container_name: quiz-service
    build:
      context: ./backend
      dockerfile: ../infrastructure/docker/quiz-service/Dockerfile
    restart: no
    environment:
      <<: *common-variables
      DEEPSEEK_API_KEY: ${DEEPSEEK_API_KEY}
      SPRING_R2DBC_URL: r2dbc:postgresql://db-quiz:5432/quiz_db
      SPRING_R2DBC_USERNAME: ${POSTGRES_USER:-postgres}
      SPRING_R2DBC_PASSWORD: ${POSTGRES_PASSWORD:-root}
      SPRING_FLYWAY_URL: jdbc:postgresql://db-quiz:5432/quiz_db
      SPRING_FLYWAY_USER: ${POSTGRES_USER:-postgres}
      SPRING_FLYWAY_PASSWORD: ${POSTGRES_PASSWORD:-root}
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8084/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8084:8084"
    depends_on:
      eureka-server:
        condition: service_healthy
      db-quiz:
        condition: service_healthy
      redis:
        condition: service_healthy

  db-auth:
    container_name: db-auth
    image: postgres:17.5-alpine3.22
    ports:
      - "5433:5432"
    environment:
      - TZ=Asia/Almaty
      - PGTZ=Asia/Almaty
      - POSTGRES_DB=auth_db
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-root}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8 --auth-host=scram-sha-256 --auth-local=scram-sha-256
    volumes:
      - db-auth-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: no

  kafka:
    image: bitnami/kafka:4.0.0
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=INTERNAL://:29092,CLIENT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:29092,CLIENT://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,CLIENT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL

  auth-service:
    container_name: auth-service
    build:
      context: ./backend
      dockerfile: ../infrastructure/docker/auth-service/Dockerfile
    restart: no
    environment:
      <<: *common-variables
      SPRING_R2DBC_URL: r2dbc:postgresql://db-auth:5433/auth_db
      SPRING_R2DBC_USERNAME: ${POSTGRES_USER:-postgres}
      SPRING_R2DBC_PASSWORD: ${POSTGRES_PASSWORD:-root}
      SPRING_FLYWAY_URL: jdbc:postgresql://db-auth:5432/auth_db
      SPRING_FLYWAY_USER: ${POSTGRES_USER:-postgres}
      SPRING_FLYWAY_PASSWORD: ${POSTGRES_PASSWORD:-root}
      SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS: kafka:9092
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8081:8081"
    depends_on:
      eureka-server:
        condition: service_healthy
      db-auth:
        condition: service_healthy
      kafka:
        condition: service_started

  db-user:
    container_name: db-user
    image: postgres:17.5-alpine3.22
    ports:
      - "5434:5432"
    environment:
      - TZ=Asia/Almaty
      - PGTZ=Asia/Almaty
      - POSTGRES_DB=user_db
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-root}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8 --auth-host=scram-sha-256 --auth-local=scram-sha-256
    volumes:
      - db-user-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: no

  notification-service:
    container_name: notification-service
    build:
      context: ./backend
      dockerfile: ../infrastructure/docker/notification-service/Dockerfile
    restart: no
    environment:
      <<: *common-variables
      SPRING_KAFKA_CONSUMER_BOOTSTRAP_SERVERS: kafka:9092
      MAILJET_PUBLIC_KEY: ${MAILJET_PUBLIC_KEY}
      MAILJET_PRIVATE_KEY: ${MAILJET_PRIVATE_KEY}
      MAILJET_SENDER_EMAIL: ${MAILJET_SENDER_EMAIL}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8083:8083"
    depends_on:
      eureka-server:
        condition: service_healthy
      kafka:
        condition: service_started

  user-service:
    container_name: user-service
    build:
      context: ./backend
      dockerfile: ../infrastructure/docker/user-service/Dockerfile
    restart: no
    environment:
      <<: *common-variables
      SPRING_R2DBC_URL: r2dbc:postgresql://db-user:5434/user_db
      SPRING_R2DBC_USERNAME: ${POSTGRES_USER:-postgres}
      SPRING_R2DBC_PASSWORD: ${POSTGRES_PASSWORD:-root}
      SPRING_FLYWAY_URL: jdbc:postgresql://db-user:5432/user_db
      SPRING_FLYWAY_USER: ${POSTGRES_USER:-postgres}
      SPRING_FLYWAY_PASSWORD: ${POSTGRES_PASSWORD:-root}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8082:8082"
    depends_on:
      eureka-server:
        condition: service_healthy
      db-user:
        condition: service_healthy

  api-gateway:
    container_name: api-gateway
    build:
      context: ./backend
      dockerfile: ../infrastructure/docker/api-gateway/Dockerfile
    restart: no
    environment:
      <<: *common-variables
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8765/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8765:8765"
    depends_on:
      quiz-service:
        condition: service_healthy

  nginx:
    container_name: nginx
    build:
      context: ./frontend
      args:
        VITE_API_URL: https://code-output-quiz.ru/
    restart: no
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      api-gateway:
        condition: service_healthy

volumes:
  db-quiz-data:
  db-auth-data:
  db-user-data:
  redis-data:
