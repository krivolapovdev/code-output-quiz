x-common-variables: &common-variables
  CONFIG_SERVER: http://config-server:8888
  EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/

services:
  prometheus:
    image: prom/prometheus:v3.4.1
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  loki:
    image: grafana/loki:3.5.1
    container_name: loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yml
    volumes:
      - ./infrastructure/docker/loki/local-config.yml:/etc/loki/local-config.yml

  grafana:
    image: grafana/grafana:12.0.1
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - loki
    volumes:
      - ./infrastructure/docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./infrastructure/docker/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/docker/grafana/dashboards:/etc/grafana/dashboards

  zipkin:
    image: openzipkin/zipkin:3.5.1
    container_name: zipkin
    ports:
      - "9411:9411"
    restart: unless-stopped

  config-server:
    container_name: config-server
    build:
      context: .
      dockerfile: infrastructure/docker/config-server/Dockerfile
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8888:8888"
    depends_on:
      - grafana
      - zipkin

  eureka-server:
    container_name: eureka-server
    build:
      context: .
      dockerfile: infrastructure/docker/eureka-server/Dockerfile
    restart: unless-stopped
    environment:
      <<: *common-variables
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8761:8761"
    depends_on:
      config-server:
        condition: service_healthy

  db-quiz:
    container_name: db-quiz
    image: postgres:17.5-alpine3.22
    ports:
      - "5432:5432"
    environment:
      - TZ=Asia/Almaty
      - PGTZ=Asia/Almaty
      - POSTGRES_DB=quiz_db
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-root}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8 --auth-host=scram-sha-256 --auth-local=scram-sha-256
    volumes:
      - db-quiz-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    container_name: redis
    image: redis:8.0.2-alpine3.21
    ports:
      - "6379:6379"
    command: [ "redis-server", "--maxmemory", "256mb", "--maxmemory-policy", "allkeys-lru" ]
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  quiz-service:
    container_name: quiz-service
    build:
      context: .
      dockerfile: infrastructure/docker/quiz-service/Dockerfile
    restart: unless-stopped
    environment:
      <<: *common-variables
      DEEPSEEK_API_KEY: ${DEEPSEEK_API_KEY}
      SPRING_R2DBC_URL: r2dbc:postgresql://db-quiz:5432/quiz_db
      SPRING_R2DBC_USERNAME: ${POSTGRES_USER:-postgres}
      SPRING_R2DBC_PASSWORD: ${POSTGRES_PASSWORD:-root}
      SPRING_FLYWAY_URL: jdbc:postgresql://db-quiz:5432/quiz_db
      SPRING_FLYWAY_USER: ${POSTGRES_USER:-postgres}
      SPRING_FLYWAY_PASSWORD: ${POSTGRES_PASSWORD:-root}
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8080:8080"
    depends_on:
      eureka-server:
        condition: service_healthy
      db-quiz:
        condition: service_healthy
      redis:
        condition: service_healthy

  db-auth:
    container_name: db-auth
    image: postgres:17.5-alpine3.22
    ports:
      - "5432:5432"
    environment:
      - TZ=Asia/Almaty
      - PGTZ=Asia/Almaty
      - POSTGRES_DB=auth_db
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-root}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8 --auth-host=scram-sha-256 --auth-local=scram-sha-256
    volumes:
      - db-auth-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  auth-service:
    container_name: auth-service
    build:
      context: .
      dockerfile: infrastructure/docker/auth-service/Dockerfile
    restart: unless-stopped
    environment:
      <<: *common-variables
      SPRING_R2DBC_URL: r2dbc:postgresql://db-auth:5432/auth_db
      SPRING_R2DBC_USERNAME: ${POSTGRES_USER:-postgres}
      SPRING_R2DBC_PASSWORD: ${POSTGRES_PASSWORD:-root}
      SPRING_FLYWAY_URL: jdbc:postgresql://db-auth:5432/auth_db
      SPRING_FLYWAY_USER: ${POSTGRES_USER:-postgres}
      SPRING_FLYWAY_PASSWORD: ${POSTGRES_PASSWORD:-root}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8080:8080"
    depends_on:
      eureka-server:
        condition: service_healthy
      db-auth:
        condition: service_healthy
      redis:
        condition: service_healthy

  api-gateway:
    container_name: api-gateway
    build:
      context: .
      dockerfile: infrastructure/docker/api-gateway/Dockerfile
    restart: unless-stopped
    environment:
      <<: *common-variables
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8765/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8765:8765"
    depends_on:
      quiz-service:
        condition: service_healthy

volumes:
  db-quiz-data:
  db-auth-data:
  redis-data:
